package {{ .PackageName }}

import (
	"context"

	sls "github.com/GotaX/logrus-aliyun-log-hook"
	"github.com/gota33/initializr"
	"github.com/sirupsen/logrus"
)

type LogrusAliyunHook struct {
	Color    bool
	Level    string
	Endpoint string
	AppKey   string
	Secret   string
	Project  string
	Store    string
	Topic    string
}

func NewLogrusAliyunHook(c initializr.Configuration) LogrusAliyunHook {
	const (
		keyColor    = "color"
		keyLevel    = "level"
		keyEndpoint = "endpoint"
		keyAppKey   = "key"
		keySecret   = "secret"
		keyProject  = "project"
		keyStore    = "store"
		keyTopic    = "topic"
	)
	return LogrusAliyunHook{
		Color:    c.Get(keyColor).AsBoolean(false),
		Level:    c.Get(keyLevel).AsString("info"),
		Endpoint: c.Get(keyEndpoint).AsString(""),
		AppKey:   c.Get(keyAppKey).AsString(""),
		Secret:   c.Get(keySecret).AsString(""),
		Project:  c.Get(keyProject).AsString(""),
		Store:    c.Get(keyStore).AsString(""),
		Topic:    c.Get(keyTopic).AsString(""),
	}
}

func (p LogrusAliyunHook) New(ctx context.Context) (hook *sls.Hook, err error) {
	c := sls.Config{
		Endpoint:     p.Endpoint,
		AccessKey:    p.AppKey,
		AccessSecret: p.Secret,
		Project:      p.Project,
		Store:        p.Store,
		Topic:        p.Topic,
		Extra:        make(map[string]string, 0),
	}
	return sls.New(c)
}

func (p LogrusAliyunHook) Setup(logger *logrus.Logger, hook *sls.Hook) (err error) {
	lvl, err := logrus.ParseLevel(p.Level)
	if err != nil {
		return
	}

	logger.AddHook(hook)
	logger.SetLevel(lvl)
	logger.SetFormatter(&logrus.TextFormatter{
		ForceColors:     p.Color,
		FullTimestamp:   true,
		TimestampFormat: "15:04:05",
	})
	return
}
